digraph "classes_kls_mcmarr" {
rankdir=BT
charset="utf-8"
"kls_mcmarr.kls.affective.Affective.Affective" [color="black", fontcolor="black", label=<{Affective|interpreter : Interpreter<br ALIGN="LEFT"/>target_size : tuple<br ALIGN="LEFT"/>|get_affective_status(image_path)<br ALIGN="LEFT"/>preprocess_image(image_input, target_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.affective.AffectiveMcmarr.AffectiveMcmarr" [color="black", fontcolor="black", label=<{AffectiveMcmarr|<br ALIGN="LEFT"/>|<I>get_affective_status</I>(image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.analyze.Analyze" [color="black", fontcolor="black", label=<{Analyze|blocking_set_analyzer<br ALIGN="LEFT"/>output_path<br ALIGN="LEFT"/>|analyze_movement(modeled_movement, expected_movement, num_iter, uuid_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.analyze.AnalyzeMcmarr.AnalyzeMcmarr" [color="black", fontcolor="black", label=<{AnalyzeMcmarr|<br ALIGN="LEFT"/>|<I>analyze_movement</I>(modeled_movement, expected_movement, num_iter, uuid_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.capture.mediapipe_wrapper.mediapipe_anonymize_image.AnonymizeWithMediapipe" [color="black", fontcolor="black", label=<{AnonymizeWithMediapipe|mp_drawing<br ALIGN="LEFT"/>mp_pose<br ALIGN="LEFT"/>|process_image(image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.BlockingSetAnalyzer.BlockingSetAnalyzer" [color="black", fontcolor="black", label=<{BlockingSetAnalyzer|<br ALIGN="LEFT"/>|analyze_movement(modeled_movement, expected_movement, output_path, num_iter, uuid_name)<br ALIGN="LEFT"/>check_body_parts(modeled_movement)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.capture.capture.Capture" [color="black", fontcolor="black", label=<{Capture|camera_num : int<br ALIGN="LEFT"/>capture_mode : str<br ALIGN="LEFT"/>formats_to_store : NoneType<br ALIGN="LEFT"/>input_video_paths : NoneType<br ALIGN="LEFT"/>output_path : str<br ALIGN="LEFT"/>recorder : NoneType<br ALIGN="LEFT"/>show_output : bool<br ALIGN="LEFT"/>video_path : NoneType<br ALIGN="LEFT"/>|capture_movement(current_movement, uuid_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.capture.CaptureMcmarr.CaptureMcmarr" [color="black", fontcolor="black", label=<{CaptureMcmarr|<br ALIGN="LEFT"/>|<I>capture_movement</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.cognitive.Cognitive.Cognitive" [color="black", fontcolor="black", label=<{Cognitive|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.cognitive.CognitiveMcmarr.CognitiveMcmarr" [color="black", fontcolor="black", label=<{CognitiveMcmarr|set_of_questions<br ALIGN="LEFT"/>|from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_set()<br ALIGN="LEFT"/>load_questions(template_path)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>xml_cognitive_template_loader(template_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.DownwardOutwardBlockAnalyzer.DownwardOutwardBlockAnalyzer" [color="black", fontcolor="black", label=<{DownwardOutwardBlockAnalyzer|center_elbow : NoneType, list<br ALIGN="LEFT"/>distance_threshold<br ALIGN="LEFT"/>distance_threshold_pixels<br ALIGN="LEFT"/>elbow_close_to_body : bool<br ALIGN="LEFT"/>finished_analysis : bool<br ALIGN="LEFT"/>finished_initial_position : bool<br ALIGN="LEFT"/>finished_transition_1 : bool<br ALIGN="LEFT"/>finished_transition_2 : bool<br ALIGN="LEFT"/>first_wrist_distance : NoneType<br ALIGN="LEFT"/>movement_completed : bool<br ALIGN="LEFT"/>pos<br ALIGN="LEFT"/>start_transition_1 : int<br ALIGN="LEFT"/>|apply_rules()<br ALIGN="LEFT"/>ending_pose()<br ALIGN="LEFT"/>initial_pose()<br ALIGN="LEFT"/>transition1()<br ALIGN="LEFT"/>transition2()<br ALIGN="LEFT"/>transitions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.EmptyAnalyzer.EmptyAnalyzer" [color="black", fontcolor="black", label=<{EmptyAnalyzer|finished_analysis : bool<br ALIGN="LEFT"/>|apply_rules()<br ALIGN="LEFT"/><I>ending_pose</I>()<br ALIGN="LEFT"/><I>initial_pose</I>()<br ALIGN="LEFT"/><I>transitions</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.ExtendedOutwardBlockAnalyzer.ExtendedOutwardBlockAnalyzer" [color="black", fontcolor="black", label=<{ExtendedOutwardBlockAnalyzer|distance_threshold<br ALIGN="LEFT"/>elbow : DataFrame<br ALIGN="LEFT"/>finished_analysis : bool<br ALIGN="LEFT"/>finished_initial_position : bool<br ALIGN="LEFT"/>finished_transition_1 : bool<br ALIGN="LEFT"/>finished_transition_2 : bool<br ALIGN="LEFT"/>movement_completed : bool<br ALIGN="LEFT"/>pos<br ALIGN="LEFT"/>wrist : DataFrame<br ALIGN="LEFT"/>|apply_rules()<br ALIGN="LEFT"/>ending_pose()<br ALIGN="LEFT"/>initial_pose()<br ALIGN="LEFT"/>transition1()<br ALIGN="LEFT"/>transition2()<br ALIGN="LEFT"/>transitions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.capture.global_values.GlobalValues" [color="black", fontcolor="black", label=<{GlobalValues|frame_height : NoneType<br ALIGN="LEFT"/>frame_width : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.HammeringInwardBlockAnalyzer.HammeringInwardBlockAnalyzer" [color="black", fontcolor="black", label=<{HammeringInwardBlockAnalyzer|distance_threshold<br ALIGN="LEFT"/>finished_analysis : bool<br ALIGN="LEFT"/>finished_initial_position : bool<br ALIGN="LEFT"/>finished_transition_1 : bool<br ALIGN="LEFT"/>finished_transition_2 : bool<br ALIGN="LEFT"/>movement_completed : bool<br ALIGN="LEFT"/>pos<br ALIGN="LEFT"/>|apply_rules()<br ALIGN="LEFT"/>ending_pose()<br ALIGN="LEFT"/>initial_pose()<br ALIGN="LEFT"/>transition1()<br ALIGN="LEFT"/>transition2()<br ALIGN="LEFT"/>transitions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.indications.indications.Indications" [color="black", fontcolor="black", label=<{Indications|engine : Engine<br ALIGN="LEFT"/>|deliver_indications(indications)<br ALIGN="LEFT"/>generate_indications(movement_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.indications.IndicationsMcmarr.IndicationsMcmarr" [color="black", fontcolor="black", label=<{IndicationsMcmarr|<br ALIGN="LEFT"/>|<I>deliver_indications</I>(indications)<br ALIGN="LEFT"/><I>generate_indications</I>(movement_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.kls.KLS" [color="black", fontcolor="black", label=<{KLS|continue_session : bool<br ALIGN="LEFT"/>current_movement : int<br ALIGN="LEFT"/>not_testing : bool<br ALIGN="LEFT"/>num_iter : int<br ALIGN="LEFT"/>set_of_movements<br ALIGN="LEFT"/>|assign_phase_implementations(indications, capture, model, analyze, response, reports, cognitive)<br ALIGN="LEFT"/>condition_finish_session()<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(data)<br ALIGN="LEFT"/>get_current_movement()<br ALIGN="LEFT"/>get_next_movement()<br ALIGN="LEFT"/>get_set_of_movements()<br ALIGN="LEFT"/>initialize_set()<br ALIGN="LEFT"/>load_set_of_movements(path, string)<br ALIGN="LEFT"/>set_set_of_movements(set_of_movements)<br ALIGN="LEFT"/>start_mcmarr_session(output_path, uuid_user)<br ALIGN="LEFT"/>stop_mcmarr_session()<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.model.low_pass_filter.LowPassFilter.LowPassFilter" [color="black", fontcolor="black", label=<{LowPassFilter|<br ALIGN="LEFT"/>|apply(raw_data)<br ALIGN="LEFT"/>butter_lowpass(cutoff, fs, order)<br ALIGN="LEFT"/>butter_lowpass_filter(data, cutoff, fs, order)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.mcmarr.MCMARR" [color="black", fontcolor="black", label=<{MCMARR|analyze : NoneType<br ALIGN="LEFT"/>capture : NoneType<br ALIGN="LEFT"/>cognitive : NoneType<br ALIGN="LEFT"/>compiled_errors : list<br ALIGN="LEFT"/>continue_session : bool<br ALIGN="LEFT"/>current_movement : int<br ALIGN="LEFT"/>current_question : int<br ALIGN="LEFT"/>indications : NoneType<br ALIGN="LEFT"/>model : NoneType<br ALIGN="LEFT"/>not_testing : bool<br ALIGN="LEFT"/>num_iter : int<br ALIGN="LEFT"/>reports : NoneType<br ALIGN="LEFT"/>response : NoneType<br ALIGN="LEFT"/>set_of_movements : NoneType<br ALIGN="LEFT"/>wrong_questions : list<br ALIGN="LEFT"/>|assign_phase_implementations(indications, capture, model, analyze, response, reports, cognitive)<br ALIGN="LEFT"/><I>condition_finish_session</I>()<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_current_movement()<br ALIGN="LEFT"/>get_next_movement()<br ALIGN="LEFT"/>get_set_of_movements()<br ALIGN="LEFT"/>initialize_set()<br ALIGN="LEFT"/>load_set_of_movements(path, string)<br ALIGN="LEFT"/>set_set_of_movements(set_of_movements)<br ALIGN="LEFT"/><I>start_mcmarr_session</I>(output_path, user_uuid)<br ALIGN="LEFT"/><I>stop_mcmarr_session</I>()<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.model.model.Model" [color="black", fontcolor="black", label=<{Model|generate_plots : bool<br ALIGN="LEFT"/>output_path : str<br ALIGN="LEFT"/>|model_movement(captured_movement, uuid_name)<br ALIGN="LEFT"/>print_scatter_plot(landmark_name, dataframe_results, interval, uuid_name, show_plot)<br ALIGN="LEFT"/>remove_nans(df)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.model.ModelMcmarr.ModelMcmarr" [color="black", fontcolor="black", label=<{ModelMcmarr|<br ALIGN="LEFT"/>|<I>model_movement</I>(captured_movement, uuid_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.movement.Movement.Movement" [color="black", fontcolor="black", label=<{Movement|description : str<br ALIGN="LEFT"/>end_frame : int<br ALIGN="LEFT"/>feedback_message : str<br ALIGN="LEFT"/>keypoints : dict, list, set, tuple<br ALIGN="LEFT"/>movement_errors : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>order : int<br ALIGN="LEFT"/>start_frame : int<br ALIGN="LEFT"/>|add_keypoint(keypoint)<br ALIGN="LEFT"/>add_movement_error(movement)<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_description()<br ALIGN="LEFT"/>get_end_frame()<br ALIGN="LEFT"/>get_feedback_message()<br ALIGN="LEFT"/>get_keypoint(name)<br ALIGN="LEFT"/>get_keypoint_names()<br ALIGN="LEFT"/>get_keypoints()<br ALIGN="LEFT"/>get_movement_error(name)<br ALIGN="LEFT"/>get_movement_error_names()<br ALIGN="LEFT"/>get_movement_errors()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/>get_order()<br ALIGN="LEFT"/>get_start_frame()<br ALIGN="LEFT"/>remove_keypoint(keypoint)<br ALIGN="LEFT"/>remove_movement_error(name)<br ALIGN="LEFT"/>set_description(description)<br ALIGN="LEFT"/>set_end_frame(end_frame)<br ALIGN="LEFT"/>set_feedback_message(feedback_message)<br ALIGN="LEFT"/>set_name(name)<br ALIGN="LEFT"/>set_order(order)<br ALIGN="LEFT"/>set_start_frame(start_frame)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.analyze.MovementAnalyzer.MovementAnalyzer" [color="black", fontcolor="black", label=<{MovementAnalyzer|current_rule : int<br ALIGN="LEFT"/>entered_in_front_of_body : bool<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>finished_analysis : bool<br ALIGN="LEFT"/>modeled_movement<br ALIGN="LEFT"/>movement_completed : bool<br ALIGN="LEFT"/>movement_name<br ALIGN="LEFT"/>pos : int<br ALIGN="LEFT"/>|<I>apply_rules</I>()<br ALIGN="LEFT"/>change_rule()<br ALIGN="LEFT"/><I>ending_pose</I>()<br ALIGN="LEFT"/><I>initial_pose</I>()<br ALIGN="LEFT"/><I>transitions</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.movement.MovementError.MovementError" [color="black", fontcolor="black", label=<{MovementError|description : str<br ALIGN="LEFT"/>end_frame : int<br ALIGN="LEFT"/>feedback_message : str<br ALIGN="LEFT"/>keypoints : dict, list, set, tuple<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>start_frame : int<br ALIGN="LEFT"/>|add_keypoint(keypoint)<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_description()<br ALIGN="LEFT"/>get_end_frame()<br ALIGN="LEFT"/>get_feedback_message()<br ALIGN="LEFT"/>get_keypoint(name)<br ALIGN="LEFT"/>get_keypoint_names()<br ALIGN="LEFT"/>get_keypoints()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/>get_start_frame()<br ALIGN="LEFT"/>remove_keypoint(keypoint)<br ALIGN="LEFT"/>set_description(description)<br ALIGN="LEFT"/>set_end_frame(end_frame)<br ALIGN="LEFT"/>set_feedback_message(feedback_message)<br ALIGN="LEFT"/>set_name(name)<br ALIGN="LEFT"/>set_start_frame(start_frame)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.cognitive.Question.Question" [color="black", fontcolor="black", label=<{Question|answers : list<br ALIGN="LEFT"/>correct_answer_pos : int<br ALIGN="LEFT"/>question : str<br ALIGN="LEFT"/>|add_answer(answer)<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_answer(pos)<br ALIGN="LEFT"/>get_answers()<br ALIGN="LEFT"/>get_correct_answer()<br ALIGN="LEFT"/>get_correct_answer_pos()<br ALIGN="LEFT"/>get_question()<br ALIGN="LEFT"/>set_answers(answers)<br ALIGN="LEFT"/>set_correct_answer_pos(correct_answer_pos)<br ALIGN="LEFT"/>set_question(question)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.cognitive.question.Question.Question" [color="black", fontcolor="black", label=<{Question|answers : list<br ALIGN="LEFT"/>correct_answer_pos : int<br ALIGN="LEFT"/>question : str<br ALIGN="LEFT"/>|add_answer(answer)<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_answer(pos)<br ALIGN="LEFT"/>get_answers()<br ALIGN="LEFT"/>get_correct_answer()<br ALIGN="LEFT"/>get_correct_answer_pos()<br ALIGN="LEFT"/>get_question()<br ALIGN="LEFT"/>set_answers(answers)<br ALIGN="LEFT"/>set_correct_answer_pos(correct_answer_pos)<br ALIGN="LEFT"/>set_question(question)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.RearElbowBlockAnalyzer.RearElbowBlockAnalyzer" [color="black", fontcolor="black", label=<{RearElbowBlockAnalyzer|distance_threshold<br ALIGN="LEFT"/>finished_analysis : bool<br ALIGN="LEFT"/>pos<br ALIGN="LEFT"/>|apply_rules()<br ALIGN="LEFT"/>ending_pose()<br ALIGN="LEFT"/>initial_pose()<br ALIGN="LEFT"/>transitions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.capture.mediapipe_wrapper.mediapipe_wrapper.RecordWithMediapipe" [color="black", fontcolor="black", label=<{RecordWithMediapipe|anonymize<br ALIGN="LEFT"/>camera_num : int<br ALIGN="LEFT"/>capture_device : NoneType<br ALIGN="LEFT"/>capture_mode : str<br ALIGN="LEFT"/>csv_captured_data : str<br ALIGN="LEFT"/>formats_to_store : list<br ALIGN="LEFT"/>input_video_path : NoneType<br ALIGN="LEFT"/>json_captured_data : dict<br ALIGN="LEFT"/>list_captured_data : list<br ALIGN="LEFT"/>mediapipe_results : list<br ALIGN="LEFT"/>mp_drawing<br ALIGN="LEFT"/>mp_drawing_styles<br ALIGN="LEFT"/>mp_pose<br ALIGN="LEFT"/>output_path : str<br ALIGN="LEFT"/>processed_captured_video : NoneType<br ALIGN="LEFT"/>processed_captured_video_skeleton_only : NoneType<br ALIGN="LEFT"/>raw_captured_video : NoneType<br ALIGN="LEFT"/>show_output : bool<br ALIGN="LEFT"/>stopCam : bool<br ALIGN="LEFT"/>stop_capture : bool<br ALIGN="LEFT"/>uuid_name : NoneType<br ALIGN="LEFT"/>|capture()<br ALIGN="LEFT"/>clone()<br ALIGN="LEFT"/>get_captured_data_as_dataframe()<br ALIGN="LEFT"/>get_captured_data_as_list()<br ALIGN="LEFT"/>initialize_csv_with_header()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>set_uuid_name(uuid_name)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>store_frame_in_csv(mediapipe_result)<br ALIGN="LEFT"/>store_frame_in_json(mediapipe_result, frame_number)<br ALIGN="LEFT"/>store_frame_in_list(mediapipe_result)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.reports.reports.Reports" [color="black", fontcolor="black", label=<{Reports|affective<br ALIGN="LEFT"/>detected_errors<br ALIGN="LEFT"/>max_score_cognitive : int<br ALIGN="LEFT"/>max_score_psychomotor : int<br ALIGN="LEFT"/>mp_drawing<br ALIGN="LEFT"/>mp_pose<br ALIGN="LEFT"/>|analyze_videos(output_path)<br ALIGN="LEFT"/>are_videos_analyzed(output_path)<br ALIGN="LEFT"/>calculate_emotion_percentages(emotions)<br ALIGN="LEFT"/>deliver_reports(generated_reports)<br ALIGN="LEFT"/>generate_reports(output_path, uuid_name, detected_errors, wrong_questions, calculate_affective)<br ALIGN="LEFT"/>generate_summary_report(output_path, uuid_name, detected_errors, wrong_questions, calculate_affective)<br ALIGN="LEFT"/>load_and_process_files(directory)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.reports.ReportsMcmarr.ReportsMcmarr" [color="black", fontcolor="black", label=<{ReportsMcmarr|detected_errors : list<br ALIGN="LEFT"/>|<I>deliver_reports</I>(generated_reports)<br ALIGN="LEFT"/><I>generate_reports</I>(output_path, uuid_name, detected_errors, wrong_questions)<br ALIGN="LEFT"/><I>generate_summary_report</I>(output_path, uuid_name, detected_errors, wrong_questions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.response.response.Response" [color="black", fontcolor="black", label=<{Response|engine : Engine<br ALIGN="LEFT"/>|asign_phrases_per_language(language)<br ALIGN="LEFT"/>deliver_response(generated_response)<br ALIGN="LEFT"/>generate_response(movement_finished, analyzed_movement_errors, movement, next_movement)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.response.ResponseMcmarr.ResponseMcmarr" [color="black", fontcolor="black", label=<{ResponseMcmarr|<br ALIGN="LEFT"/>|<I>deliver_response</I>(generated_response)<br ALIGN="LEFT"/><I>generate_response</I>(movement_finished, analyzed_movement_errors, movement, next_movement)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.movement.SetOfMovements.SetOfMovements" [color="black", fontcolor="black", label=<{SetOfMovements|description : str<br ALIGN="LEFT"/>model : NoneType<br ALIGN="LEFT"/>movements : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>template : NoneType<br ALIGN="LEFT"/>|add_movement(movement)<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_description()<br ALIGN="LEFT"/>get_df_header()<br ALIGN="LEFT"/>get_movement(name)<br ALIGN="LEFT"/>get_movement_names()<br ALIGN="LEFT"/>get_movements()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/>get_template()<br ALIGN="LEFT"/>get_template_of_movement(name)<br ALIGN="LEFT"/>remove_movement(name)<br ALIGN="LEFT"/>remove_movement_error(name)<br ALIGN="LEFT"/>set_description(description)<br ALIGN="LEFT"/>set_model_implementation(model)<br ALIGN="LEFT"/>set_name(name)<br ALIGN="LEFT"/>set_template(json_template)<br ALIGN="LEFT"/>template_json_to_df(json_template)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.cognitive.SetOfQuestions.SetOfQuestions" [color="black", fontcolor="black", label=<{SetOfQuestions|questions : list<br ALIGN="LEFT"/>|add_question(question)<br ALIGN="LEFT"/>from_dict(data)<br ALIGN="LEFT"/>from_json(json_str)<br ALIGN="LEFT"/>get_answers_question(pos)<br ALIGN="LEFT"/>get_correct_answer_pos_question(pos)<br ALIGN="LEFT"/>get_correct_answer_question(pos)<br ALIGN="LEFT"/>get_question(pos)<br ALIGN="LEFT"/>get_questions()<br ALIGN="LEFT"/>set_questions(questions)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.test.mcmarr.mcmarr.testMcmarr.TestMCMARR" [color="black", fontcolor="black", label=<{TestMCMARR|json_string_set : str<br ALIGN="LEFT"/>mcmarr<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_assign_phase_implementations()<br ALIGN="LEFT"/>test_condition_finish_session()<br ALIGN="LEFT"/>test_from_dict()<br ALIGN="LEFT"/>test_load_set_of_movements()<br ALIGN="LEFT"/>test_start_mcmarr_session()<br ALIGN="LEFT"/>test_stop_mcmarr_session()<br ALIGN="LEFT"/>test_to_dict()<br ALIGN="LEFT"/>test_video_1()<br ALIGN="LEFT"/>test_video_10()<br ALIGN="LEFT"/>test_video_11()<br ALIGN="LEFT"/>test_video_12()<br ALIGN="LEFT"/>test_video_13()<br ALIGN="LEFT"/>test_video_14()<br ALIGN="LEFT"/>test_video_2()<br ALIGN="LEFT"/>test_video_3()<br ALIGN="LEFT"/>test_video_4()<br ALIGN="LEFT"/>test_video_5()<br ALIGN="LEFT"/>test_video_6()<br ALIGN="LEFT"/>test_video_7()<br ALIGN="LEFT"/>test_video_8()<br ALIGN="LEFT"/>test_video_9()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.test.mcmarr.mcmarr.testAnalysisUtils.TestMovement" [color="black", fontcolor="black", label=<{TestMovement|<br ALIGN="LEFT"/>|<I>setUp</I>()<br ALIGN="LEFT"/>test_angle_between_lines()<br ALIGN="LEFT"/>test_calculate_center()<br ALIGN="LEFT"/>test_calculate_distance_threshold()<br ALIGN="LEFT"/>test_combine_close_points()<br ALIGN="LEFT"/>test_distance_point_to_line()<br ALIGN="LEFT"/>test_is_clockwise_origin_0()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.test.mcmarr.movement.testMovement.TestMovement" [color="black", fontcolor="black", label=<{TestMovement|movement<br ALIGN="LEFT"/>sample_data : dict<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_remove_keypoint()<br ALIGN="LEFT"/>test_add_remove_movement_error()<br ALIGN="LEFT"/>test_from_dict()<br ALIGN="LEFT"/>test_from_json()<br ALIGN="LEFT"/>test_get_keypoint()<br ALIGN="LEFT"/>test_get_keypoint_names()<br ALIGN="LEFT"/>test_get_movement_error()<br ALIGN="LEFT"/>test_get_movement_error_names()<br ALIGN="LEFT"/>test_set_get_description()<br ALIGN="LEFT"/>test_set_get_end_frame()<br ALIGN="LEFT"/>test_set_get_feedback_message()<br ALIGN="LEFT"/>test_set_get_name()<br ALIGN="LEFT"/>test_set_get_order()<br ALIGN="LEFT"/>test_set_get_start_frame()<br ALIGN="LEFT"/>test_to_dict()<br ALIGN="LEFT"/>test_to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.test.mcmarr.movement.testMovementError.TestMovementError" [color="black", fontcolor="black", label=<{TestMovementError|movement_error<br ALIGN="LEFT"/>sample_data : dict<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_get_keypoint()<br ALIGN="LEFT"/>test_add_remove_keypoint()<br ALIGN="LEFT"/>test_from_dict()<br ALIGN="LEFT"/>test_from_json()<br ALIGN="LEFT"/>test_get_keypoint_names()<br ALIGN="LEFT"/>test_set_get_description()<br ALIGN="LEFT"/>test_set_get_end_frame()<br ALIGN="LEFT"/>test_set_get_feedback_message()<br ALIGN="LEFT"/>test_set_get_name()<br ALIGN="LEFT"/>test_set_get_start_frame()<br ALIGN="LEFT"/>test_to_dict()<br ALIGN="LEFT"/>test_to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.test.mcmarr.movement.testSetOfMovements.TestSetOfMovements" [color="black", fontcolor="black", label=<{TestSetOfMovements|set_of_movements<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_add_remove_movement()<br ALIGN="LEFT"/>test_from_dict()<br ALIGN="LEFT"/>test_from_json()<br ALIGN="LEFT"/>test_get_df_header()<br ALIGN="LEFT"/>test_get_movement()<br ALIGN="LEFT"/>test_get_movement_names()<br ALIGN="LEFT"/>test_get_movements()<br ALIGN="LEFT"/>test_get_template_of_movement()<br ALIGN="LEFT"/>test_remove_movement_error()<br ALIGN="LEFT"/>test_set_get_description()<br ALIGN="LEFT"/>test_set_get_name()<br ALIGN="LEFT"/>test_set_get_template()<br ALIGN="LEFT"/>test_template_json_to_df()<br ALIGN="LEFT"/>test_to_dict()<br ALIGN="LEFT"/>test_to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.test.mcmarr.affective.testAffective.TestSetOfQuestions" [color="black", fontcolor="black", label=<{TestSetOfQuestions|affective<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_affective()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.test.mcmarr.cognitive.testCognitive.TestSetOfQuestions" [color="black", fontcolor="black", label=<{TestSetOfQuestions|cognitive<br ALIGN="LEFT"/>maxDiff : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_from_dict()<br ALIGN="LEFT"/>test_from_json()<br ALIGN="LEFT"/>test_to_dict()<br ALIGN="LEFT"/>test_to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.UpwardBlockAnalyzer.UpwardBlockAnalyzer" [color="black", fontcolor="black", label=<{UpwardBlockAnalyzer|distance_threshold<br ALIGN="LEFT"/>finished_analysis : bool<br ALIGN="LEFT"/>finished_initial_position : bool<br ALIGN="LEFT"/>finished_transition_1 : bool<br ALIGN="LEFT"/>finished_transition_2 : bool<br ALIGN="LEFT"/>finished_transition_3 : bool<br ALIGN="LEFT"/>finished_transition_4 : bool<br ALIGN="LEFT"/>movement_completed : bool<br ALIGN="LEFT"/>pos<br ALIGN="LEFT"/>|apply_rules()<br ALIGN="LEFT"/>ending_pose()<br ALIGN="LEFT"/>initial_pose()<br ALIGN="LEFT"/>transition1()<br ALIGN="LEFT"/>transition2()<br ALIGN="LEFT"/>transition3()<br ALIGN="LEFT"/>transition4()<br ALIGN="LEFT"/>transitions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.movement.XmlGenerator.XmlGenerator" [color="black", fontcolor="black", label=<{XmlGenerator|set_of_movements<br ALIGN="LEFT"/>|generate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.mcmarr.movement.XmlSetLoader.XmlSetLoader" [color="black", fontcolor="black", label=<{XmlSetLoader|path : NoneType<br ALIGN="LEFT"/>string : NoneType<br ALIGN="LEFT"/>|load_xml_set()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kls_mcmarr.kls.affective.Affective.Affective" -> "kls_mcmarr.mcmarr.affective.AffectiveMcmarr.AffectiveMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.analyze.analyze.Analyze" -> "kls_mcmarr.mcmarr.analyze.AnalyzeMcmarr.AnalyzeMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.DownwardOutwardBlockAnalyzer.DownwardOutwardBlockAnalyzer" -> "kls_mcmarr.mcmarr.analyze.MovementAnalyzer.MovementAnalyzer" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.EmptyAnalyzer.EmptyAnalyzer" -> "kls_mcmarr.mcmarr.analyze.MovementAnalyzer.MovementAnalyzer" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.ExtendedOutwardBlockAnalyzer.ExtendedOutwardBlockAnalyzer" -> "kls_mcmarr.mcmarr.analyze.MovementAnalyzer.MovementAnalyzer" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.HammeringInwardBlockAnalyzer.HammeringInwardBlockAnalyzer" -> "kls_mcmarr.mcmarr.analyze.MovementAnalyzer.MovementAnalyzer" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.RearElbowBlockAnalyzer.RearElbowBlockAnalyzer" -> "kls_mcmarr.mcmarr.analyze.MovementAnalyzer.MovementAnalyzer" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.UpwardBlockAnalyzer.UpwardBlockAnalyzer" -> "kls_mcmarr.mcmarr.analyze.MovementAnalyzer.MovementAnalyzer" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.capture.capture.Capture" -> "kls_mcmarr.mcmarr.capture.CaptureMcmarr.CaptureMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.cognitive.Cognitive.Cognitive" -> "kls_mcmarr.mcmarr.cognitive.CognitiveMcmarr.CognitiveMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.indications.indications.Indications" -> "kls_mcmarr.mcmarr.indications.IndicationsMcmarr.IndicationsMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.kls.KLS" -> "kls_mcmarr.mcmarr.mcmarr.MCMARR" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.model.model.Model" -> "kls_mcmarr.mcmarr.model.ModelMcmarr.ModelMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.reports.reports.Reports" -> "kls_mcmarr.mcmarr.reports.ReportsMcmarr.ReportsMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.response.response.Response" -> "kls_mcmarr.mcmarr.response.ResponseMcmarr.ResponseMcmarr" [arrowhead="empty", arrowtail="none"];
"kls_mcmarr.kls.affective.Affective.Affective" -> "kls_mcmarr.kls.reports.reports.Reports" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="affective", style="solid"];
"kls_mcmarr.kls.affective.Affective.Affective" -> "kls_mcmarr.test.mcmarr.affective.testAffective.TestSetOfQuestions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="affective", style="solid"];
"kls_mcmarr.kls.analyze.blocking_set_analyzer.BlockingSetAnalyzer.BlockingSetAnalyzer" -> "kls_mcmarr.kls.analyze.analyze.Analyze" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="blocking_set_analyzer", style="solid"];
"kls_mcmarr.kls.capture.mediapipe_wrapper.mediapipe_anonymize_image.AnonymizeWithMediapipe" -> "kls_mcmarr.kls.capture.mediapipe_wrapper.mediapipe_wrapper.RecordWithMediapipe" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="anonymize", style="solid"];
"kls_mcmarr.kls.capture.mediapipe_wrapper.mediapipe_wrapper.RecordWithMediapipe" -> "kls_mcmarr.kls.capture.capture.Capture" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="recorder", style="solid"];
"kls_mcmarr.kls.kls.KLS" -> "kls_mcmarr.test.mcmarr.mcmarr.testMcmarr.TestMCMARR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mcmarr", style="solid"];
"kls_mcmarr.mcmarr.cognitive.CognitiveMcmarr.CognitiveMcmarr" -> "kls_mcmarr.test.mcmarr.cognitive.testCognitive.TestSetOfQuestions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cognitive", style="solid"];
"kls_mcmarr.mcmarr.cognitive.SetOfQuestions.SetOfQuestions" -> "kls_mcmarr.mcmarr.cognitive.CognitiveMcmarr.CognitiveMcmarr" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="set_of_questions", style="solid"];
"kls_mcmarr.mcmarr.cognitive.SetOfQuestions.SetOfQuestions" -> "kls_mcmarr.mcmarr.cognitive.CognitiveMcmarr.CognitiveMcmarr" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="set_of_questions", style="solid"];
"kls_mcmarr.mcmarr.cognitive.SetOfQuestions.SetOfQuestions" -> "kls_mcmarr.mcmarr.cognitive.CognitiveMcmarr.CognitiveMcmarr" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="set_of_questions", style="solid"];
"kls_mcmarr.mcmarr.movement.Movement.Movement" -> "kls_mcmarr.test.mcmarr.movement.testMovement.TestMovement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="movement", style="solid"];
"kls_mcmarr.mcmarr.movement.Movement.Movement" -> "kls_mcmarr.test.mcmarr.movement.testMovement.TestMovement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="movement", style="solid"];
"kls_mcmarr.mcmarr.movement.MovementError.MovementError" -> "kls_mcmarr.test.mcmarr.movement.testMovementError.TestMovementError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="movement_error", style="solid"];
"kls_mcmarr.mcmarr.movement.MovementError.MovementError" -> "kls_mcmarr.test.mcmarr.movement.testMovementError.TestMovementError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="movement_error", style="solid"];
"kls_mcmarr.mcmarr.movement.SetOfMovements.SetOfMovements" -> "kls_mcmarr.kls.kls.KLS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="set_of_movements", style="solid"];
"kls_mcmarr.mcmarr.movement.SetOfMovements.SetOfMovements" -> "kls_mcmarr.mcmarr.mcmarr.MCMARR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="set_of_movements", style="solid"];
"kls_mcmarr.mcmarr.movement.SetOfMovements.SetOfMovements" -> "kls_mcmarr.mcmarr.mcmarr.MCMARR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="set_of_movements", style="solid"];
"kls_mcmarr.mcmarr.movement.SetOfMovements.SetOfMovements" -> "kls_mcmarr.test.mcmarr.movement.testSetOfMovements.TestSetOfMovements" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="set_of_movements", style="solid"];
}
